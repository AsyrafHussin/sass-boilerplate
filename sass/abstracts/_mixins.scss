// center block elemet
//  p{
//    @include push--auto;
// }
@mixin push--auto {
    margin: { 
        left: auto;
        right: auto
    }
}

//  when using ::before and ::after
//  div::after {
//    @include pseudo;
//    top: -1rem; left: -1rem;
//    width: 1rem; height: 1rem;
//  }
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}        

// create scalable elements (usually images / background images) that maintain a ratio.
// div {
//    @include responsive-ratio(16,9);
// }
@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

// font style (size,color,font-weight,line-height)
@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

// style input placeholder
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// breakpoint
@mixin breakpoint($point)       {
    @if $point == retina {
        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { @content; }
    }
    @if $point == xxlarge {
        @media (min-width: 1921px) { @content; }
    }
    @if $point == xlarge {
        @media (min-width: 1600px) { @content; }
    }
    @if $point == large {
        @media (min-width: 1441px) { @content; }
    }
    @else if $point == regular-screen {
        @media (min-width: 1200px) { @content; }
    }
    @else if $point ==  medium {
        @media (min-width: 1024px)  { @content; }
    }
    @else if $point ==  landscape {
        @media (min-width: 1024px)  { @content; }
    }
    @else if $point ==  smaller-screen {
        @media (min-width: 800px)  { @content; }
    }
    @else if $point ==  portrait {
        @media (min-width: 768px)  { @content; }
    }
    @else if $point ==  small {
        @media (min-width: 640px)  { @content; }
    }
    @else if $point ==  large-mobile {
        @media (min-width: 480px)  { @content; }
    }
    @else if $point ==  mobile {
        @media (min-width: 360px)  { @content; }
    }
} 

// truncate element
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// unselectable element
@mixin unselectable {
    -webkit-touch-callout: none;
    user-select: none;
}

// black-and-white and color to filter image
@mixin black-and-white() {
    filter: grayscale(100%);
}

@mixin color() {
    filter: grayscale(0%);
}